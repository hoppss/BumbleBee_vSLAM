#ifndef SINGLE_OUTPUT_HEADER_HPP
#define SINGLE_OUTPUT_HEADER_HPP

#include <highgui.h>


#include <opencv2/calib3d.hpp>
#include <opencv2/core.hpp>
#include <opencv2/opencv.hpp>


#include <iostream>

#include "DataStructures/CameraInfo/Single.hpp"
#include "Calibration/SingleConfig.hpp"
namespace stereo
{
	/* Class that holds all the output information generated by SingleCalibrator
	 * it retains all the directory information of the images used for calibrating the single camera,
	 * and the corners found. This can be used individually, or passed into a StereoConfig class for
	 * calibrating a stereo camera*/
	
class SingleOutput
{
	public:
		SingleOutput();
		SingleConfig conf_; //configuration file used to generate this output
		std::vector< std::vector<cv::Point2f> > foundCorners;
		std::vector<std::string> fullDirNames,indivNames;
		/*fullDirNames holds the full directory of each image used in the calibration procedure,
		 * it corresponds with foundCorners and indivNames i.e accessing element [2] should be 
		 * all the information associated with an individual image...the corners found, the full directory
		 * and the individual name of the image file used*/
		double rms_meas;// Root mean square error of the calibration
		cv::Mat measured_k;//intrinsic camera matrix estimated K
		cv::Mat measured_d;//intrinsic distortion co efficients D
		cv::Size calibration_size;//calibration image size
		void write(cv::FileStorage& fs) const;
		void read(const cv::FileNode& node);
		friend class StereoOutput;
		friend class StereoCalibrator;
	
};

static void read(const cv::FileNode& node, stereo::SingleOutput& x, const stereo::SingleOutput& default_value = stereo::SingleOutput()){
   if(node.empty())
	{
        x = default_value;
	}
    else
	{
        x.read(node);
	}
}

static void write(cv::FileStorage& fs, const std::string&, const stereo::SingleOutput& x)
{
    x.write(fs);
}

}



#endif